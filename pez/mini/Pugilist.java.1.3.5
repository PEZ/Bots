package pez.mini;
import robocode.*;
import robocode.util.Utils;
import java.util.*;
import java.awt.geom.*;
import java.awt.Color;

import robocode.robocodeGL.*; // GL
import robocode.robocodeGL.system.*; // GL
import java.lang.reflect.*; // GL

// This code is released under the RoboWiki Public Code Licence (RWPCL), datailed on:
// http://robowiki.net/?RWPCL
//
// Pugilist, by PEZ. Although a pugilist needs strong and accurate fists, he/she even more needs an evasive movement.
//
// Ideas and concepts are often my own, but i have borrowed from many places too. Quite often from Jamougha and Kawigi.
//
// $Id: Pugilist.java,v 1.35 2004/03/12 17:02:27 peter Exp $

public class Pugilist extends AdvancedRobot {
    static final double BOT_WIDTH = 36;
    static final double MAX_VELOCITY = 8;

    static final double BATTLE_FIELD_WIDTH = 800;
    static final double BATTLE_FIELD_HEIGHT = 600;
    static final double MAX_WALL_SMOOTH_TRIES = 500;
    static final double WALL_MARGIN = 18;
    static final Rectangle2D fieldRectangle = new Rectangle2D.Double(WALL_MARGIN, WALL_MARGIN,
	    BATTLE_FIELD_WIDTH - WALL_MARGIN * 2, BATTLE_FIELD_HEIGHT - WALL_MARGIN * 2);

    static final double MAX_DISTANCE = 900;
    static final double MAX_BULLET_TRAVEL_TIME = 80;
    static final double MAX_BULLET_POWER = 3.0;
    static final double BULLET_POWER = 1.9;

    static final int FACTORS = 27;
    static final int MIDDLE_FACTOR = (FACTORS - 1) / 2;
    static final int DISTANCE_INDEXES = 5;
    static final int VELOCITY_INDEXES = 5;
    static final int LAST_VELOCITY_INDEXES = 5;
    static final int WALL_INDEXES = 2;
    static final int DECCEL_TIME_INDEXES = 6;
    static final int BULLET_POWER_INDEXES = 5;


    static Point2D robotLocation = new Point2D.Double();
    static Point2D enemyLocation = new Point2D.Double();
    static double enemyDistance;
    static int distanceIndex;
    static double enemyVelocity;
    double enemyEnergy;
    static int enemyTimeSinceDeccel;
    static double enemyBearingDirection = 0.75;
    static int[][][][][][] aimFactors = new int[DISTANCE_INDEXES][VELOCITY_INDEXES][LAST_VELOCITY_INDEXES][DECCEL_TIME_INDEXES][WALL_INDEXES][FACTORS];

    static double enemyFirePower = 2.5;
    static double robotBearingDirection = 1;
    static int[][][][] moveFactors = new int[DISTANCE_INDEXES][BULLET_POWER_INDEXES][WALL_INDEXES][FACTORS];
    static EnemyWave passingWave;
    static double visitsForward;
    static double visitsReverse;
    static double orbitDirection = 1;
    long nextDirectionChangeTime;

    public void run() {
	setAdjustRadarForGunTurn(true);
	setAdjustGunForRobotTurn(true);

	passingWave = null;

	do {
	    turnRadarRightRadians(Double.POSITIVE_INFINITY); 
	} while (true);
    }

    public void onScannedRobot(ScannedRobotEvent e) {
	Wave wave = new Wave();
	wave.robot = this;
	EnemyWave ew = new EnemyWave();
	ew.robot = this;
	ew.gunLocation = new Point2D.Double(enemyLocation.getX(), enemyLocation.getY());
	ew.startBearing = ew.gunBearing(robotLocation);

	double enemyDeltaEnergy = enemyEnergy - e.getEnergy();
	if (enemyDeltaEnergy > 0 && enemyDeltaEnergy <= 3.0) {
	    enemyFirePower = enemyDeltaEnergy;
	    ew.surfable = true;
	}
	enemyEnergy = e.getEnergy();
	ew.bulletVelocity = bulletVelocity(enemyFirePower);

	ew.bearingDirection = (robotBearingDirection * maxEscapeAngle(ew.bulletVelocity)) / (double)MIDDLE_FACTOR;

	ew.visits = moveFactors[distanceIndex = (int)(enemyDistance / (MAX_DISTANCE / DISTANCE_INDEXES))]
	    [(int)(enemyFirePower / 0.65)]
	    [fieldRectangle.contains(project(enemyLocation, ew.startBearing + ew.bearingDirection * 15, enemyDistance)) ? 0 : 1]
	    ;
	ew.targetLocation = robotLocation;

	robotLocation.setLocation(new Point2D.Double(getX(), getY()));
	double enemyAbsoluteBearing = getHeadingRadians() + e.getBearingRadians();
	enemyLocation.setLocation(project(wave.gunLocation = new Point2D.Double(getX(), getY()), enemyAbsoluteBearing, enemyDistance));
	wave.targetLocation = enemyLocation;
	enemyDistance = e.getDistance();

	ew.advance(2);
	addCustomEvent(ew);

	// <gun>
	int lastVelocityIndex = (int)Math.abs(enemyVelocity) / 2;
	int velocityIndex = (int)Math.abs((enemyVelocity = e.getVelocity()) / 2);
	if (velocityIndex < lastVelocityIndex) {
	    enemyTimeSinceDeccel = 0;
	}

	//double bulletPower = MAX_BULLET_POWER; // TargetingChallenge
	double bulletPower = Math.min(enemyEnergy / 4, distanceIndex > 2 ? BULLET_POWER : MAX_BULLET_POWER);
	wave.bulletVelocity = bulletVelocity(bulletPower);

	if (enemyVelocity != 0) {
	    enemyBearingDirection = 0.75 * sign(enemyVelocity * Math.sin(e.getHeadingRadians() - enemyAbsoluteBearing));
	}
	wave.bearingDirection = enemyBearingDirection / (double)MIDDLE_FACTOR;

	wave.visits = aimFactors[distanceIndex][velocityIndex][lastVelocityIndex][Math.min(5, enemyTimeSinceDeccel++ / 13)]
	    [fieldRectangle.contains(project(wave.gunLocation, enemyAbsoluteBearing + wave.bearingDirection * 13, enemyDistance)) ? 1 : 0];

	wave.startBearing = enemyAbsoluteBearing;

	setTurnGunRightRadians(Utils.normalRelativeAngle(enemyAbsoluteBearing - getGunHeadingRadians() +
		    wave.bearingDirection * (wave.mostVisited() - MIDDLE_FACTOR)));

	if (getEnergy() >= BULLET_POWER) {
	    setFire(bulletPower);
	    addCustomEvent(wave);
	}
	// </gun>

	orbitDirection = visitsReverse < visitsForward ? -robotBearingDirection : robotBearingDirection;
	Point2D destination = wallSmoothedDestination(enemyLocation, robotLocation, orbitDirection * 0.4, 1.2);
	// Jamougha's cool way
	double angle;
	setAhead(Math.cos(angle = wave.gunBearing(destination) - getHeadingRadians()) * 100);
	setTurnRightRadians(Math.tan(angle));

	setTurnRadarRightRadians(Utils.normalRelativeAngle(enemyAbsoluteBearing - getRadarHeadingRadians()) * 2);

	visitsForward = visitsReverse = 0;

 	if (ew.surfable) { // GL
 	    ew.grapher = new WaveGrapher(ew); // GL
 	} // GL
    }

    public void onHitByBullet(HitByBulletEvent e) {
	EnemyWave wave = passingWave;
	if (wave != null) {
	    //wave.registerVisits(1000);
	}
    }

    static Point2D wallSmoothedDestination(Point2D orbitLocation, Point2D satelliteLocation,
	    double deltaBearing, double distanceFactor) {
	Point2D destination = null;
	double wallSmoothTries = 0;
	while (!fieldRectangle.contains(destination =
		project(orbitLocation,
		absoluteBearing(orbitLocation, satelliteLocation) + deltaBearing,
		Math.max(250, robotLocation.distance(orbitLocation)) * (distanceFactor - wallSmoothTries / 100))) &&
		wallSmoothTries < MAX_WALL_SMOOTH_TRIES) {
	    wallSmoothTries++;
	}
	/*
	if (wallSmoothTries > 25 + distanceIndex * 10) {
	    visitsForward *= 2;
	}
	*/
	return destination;
    }

    static void updateDirectionStats(EnemyWave wave, double absVelocity) {
	Point2D destination;
	//double timeToImpact = wave.distanceToTarget() / wave.bulletVelocity; // I don't want to do the subtraction part...
	//double distance = Math.min(absVelocity / 2, MAX_VELOCITY - (absVelocity * 2 + MAX_VELOCITY));
	//destination = wallSmoothedDestination(enemyLocation, robotLocation, -wave.deltaBearing(8 * robotBearingDirection), 1.1);
	destination = wallSmoothedDestination(enemyLocation, robotLocation, wave.deltaBearing((11 - 2 * (MAX_VELOCITY - absVelocity)) * robotBearingDirection), 1.1);
	visitsReverse += wave.smoothedVisits(destination);
 	wave.grapher.drawReverseDestination(destination, wave.smoothedVisits(destination)); // GL

	//distance = (MAX_VELOCITY - (MAX_VELOCITY - absVelocity)) * robotBearingDirection;
	destination = wallSmoothedDestination(enemyLocation, robotLocation, wave.deltaBearing((40 - MAX_VELOCITY - absVelocity) * robotBearingDirection), 1.1);
	visitsForward += wave.smoothedVisits(destination);
 	wave.grapher.drawForwardDestination(destination, wave.smoothedVisits(destination)); // GL
    }

    static double bulletVelocity(double bulletPower) {
	return 20 - 3 * bulletPower;
    }

    static double maxEscapeAngle(double bulletVelocity) {
	return Math.asin(MAX_VELOCITY / bulletVelocity);
    }

    static Point2D project(Point2D sourceLocation, double angle, double length) {
	return new Point2D.Double(sourceLocation.getX() + Math.sin(angle) * length,
		sourceLocation.getY() + Math.cos(angle) * length);
    }

    static double absoluteBearing(Point2D source, Point2D target) {
	return Math.atan2(target.getX() - source.getX(), target.getY() - source.getY());
    }

    static int sign(double v) {
        return v > 0 ? 1 : -1;
    }

    static double minMax(double v, double min, double max) {
	return Math.max(min, Math.min(max, v));
    }
}

class Wave extends Condition {
    Pugilist robot;
    double bulletVelocity;
    Point2D gunLocation;
    Point2D targetLocation;
    double startBearing;
    double bearingDirection;
    int[] visits;
    double distanceFromGun;

    public boolean test() {
	advance(1);
	if (passing(-18)) {
	    if (robot.getOthers() > 0) {
		registerVisits(1);
	    }
	    robot.removeCustomEvent(this);
	}
	return false;
    }

    public boolean passing(double distanceOffset) {
	return distanceFromGun > gunLocation.distance(targetLocation) + distanceOffset;
    }

    void advance(int ticks) {
	distanceFromGun += ticks * bulletVelocity;
    }

    int visitingIndex(Point2D target) {
	return (int)Pugilist.minMax(
	    Math.round(((Utils.normalRelativeAngle(gunBearing(target) - startBearing)) / bearingDirection) + Pugilist.MIDDLE_FACTOR), 0 , Pugilist.FACTORS - 1);
    }

    void registerVisits(int count) {
	try {
	    visits[visitingIndex(targetLocation)] += count;
	}
	catch (ArrayIndexOutOfBoundsException e) {
	}
    }

    double gunBearing(Point2D target) {
	return Pugilist.absoluteBearing(gunLocation, target);
    }

    double currentBearing() {
	return gunBearing(targetLocation);
    }

    double distanceToTarget() {
	return gunLocation.distance(targetLocation) - distanceFromGun;
    }

    double shootingDistance() {
	return gunLocation.distance(targetLocation);
    }

    int mostVisited() {
	int mostVisited = Pugilist.MIDDLE_FACTOR, i = Pugilist.FACTORS - 1;
	do  {
	    if (visits[--i] > visits[mostVisited]) {
		mostVisited = i;
	    }
	} while (i > 0);
	return mostVisited;
    }

    double smoothedVisits(Point2D destination) {
	return smoothedVisits(visitingIndex(destination));
    }

    double smoothedVisits(int index) {
	double smoothed = 0;
	int i = 1;
	do {
	    smoothed += (double)visits[i] / Math.pow(Math.abs(index - i) + 1.0, 0.3);
	    i++;
	} while (i < Pugilist.FACTORS);
	return smoothed / Math.sqrt(distanceToTarget() / bulletVelocity);
    }

    double deltaBearing(double distance) {
	return (distance / shootingDistance());
    }
}

class EnemyWave extends Wave {
    static double lateralVelocity;
    WaveGrapher grapher; // GL

    boolean surfable;

    public boolean test() {
	lateralVelocity = robot.getVelocity() * Math.sin(robot.getHeadingRadians() - startBearing);
	if (lateralVelocity != 0) {
	    Pugilist.robotBearingDirection = Pugilist.sign(lateralVelocity);
	}
	advance(1);
	if (passing(-40)) {
	    surfable = false;
	}
	if (passing(-18)) {
	    if (Pugilist.passingWave != this && robot.enemyEnergy + robot.getEnergy() > 0) {
		registerVisits(1);
	    }
	    Pugilist.passingWave = this;
	}
	if (passing(18)) {
 	    if (grapher != null) { // GL
 		grapher.remove(); // GL
 	    } // GL
	    robot.removeCustomEvent(this);
	}
	else if (surfable) {
	    Pugilist.updateDirectionStats(this, Math.abs(robot.getVelocity()));
	}
 	if (grapher != null) { // GL
 	    grapher.drawWave(); // GL
 	} // GL
	return false;
    }
}

/* GL */
class WaveGrapher {
    static GLRenderer renderer = GLRenderer.getInstance();
    static int counter = 0;
    String id;
    Wave wave;
    PointGL[] dots;
    PointGL reverseDestination = new PointGL();
    PointGL forwardDestination = new PointGL();
    LabelGL reverseLabel = new LabelGL("");
    LabelGL forwardLabel = new LabelGL("");

    StatGrapher statGrapher;

    
    WaveGrapher(Wave wave) {
	this.id = "" + counter++;
	this.wave = wave;
	this.dots = new PointGL[wave.visits.length];
	for (int i = 0; i < dots.length; i++) {
	    dots[i] = new PointGL();
	    if (i == Pugilist.MIDDLE_FACTOR) {
		dots[i].addLabel(new LabelGL(id));
	    }
	    renderer.addRenderElement(dots[i]);
	}
	reverseDestination.addLabel(reverseLabel);
	reverseDestination.setColor(Color.RED);
	reverseDestination.setSize(15);
	reverseDestination.setPosition(-100, -100);
	forwardDestination.addLabel(forwardLabel);
	forwardDestination.setColor(Color.GREEN);
	forwardDestination.setSize(15);
	forwardDestination.setPosition(-100, -100);
	renderer.addRenderElement(reverseDestination);
	renderer.addRenderElement(forwardDestination);
	statGrapher = new StatGrapher(Color.YELLOW, wave.visits);
	statGrapher.setFrame(0, 0, Pugilist.BATTLE_FIELD_WIDTH, Pugilist.BATTLE_FIELD_HEIGHT);
    }

    void drawWave() {
	float totalVisits = 0;
	for (int i = 0; i < wave.visits.length; i++) {
	    totalVisits += wave.smoothedVisits(i);
	}
	for (int i = 0; i < dots.length; i++) {
	    Point2D dot = Pugilist.project(wave.gunLocation,
					  wave.startBearing + wave.bearingDirection * (i - Pugilist.MIDDLE_FACTOR),
					  wave.distanceFromGun);
	    dots[i].setPosition(dot.getX(), dot.getY());
	    dots[i].setColor(Color.BLUE);
	    dots[i].setSize(150 * (float)wave.smoothedVisits(i) / totalVisits);
	}
	statGrapher.draw();
    }

    void drawDestination(PointGL destination, LabelGL label, Point2D coords, double value) {
	destination.setPosition(coords.getX(), coords.getY());
	label.setString(id + " : " + (int)value);
    }

    void drawReverseDestination(Point2D coords, double value) {
	drawDestination(reverseDestination, reverseLabel, coords, value);
    }

    void drawForwardDestination(Point2D coords, double value) {
	drawDestination(forwardDestination, forwardLabel, coords, value);
    }

    void remove() {
	for (int i = 0; i < dots.length; i++) {
	    dots[i].remove();
	}
	reverseDestination.remove();
	forwardDestination.remove();
	statGrapher.remove();
    }
}

// A modified version of Nano's http://robowiki.net/?StatGrapher
class StatGrapher {
    private LineGL[] graph;
    private Object stats;
    private Object selected;
    private double x, y, width, height;
    private double lineWidth = 2;
    private Color color = Color.GREEN;

    public StatGrapher(Color color, Object stats) {
	this.color = color;
	this.stats = this.selected = stats;
	graph = new LineGL[Array.getLength(selected) - 1];
	for (int i = 0; i < graph.length; i++) {
	    graph[i] = new LineGL();
	}

    }

    public void setFrame(double x, double y, double width, double height) {
	setX(x); setY(y); setWidth(width); setHeight(height);
    }

    public void setX(double x) { this.x = x; }
    public void setY(double y) { this.y = y; }
    public void setWidth(double width) { this.width = width; }
    public void setHeight(double height) { this.height = height; }
    public void setStats(Object stats) { this.stats = this.selected = stats; }
    public void setColor(Color color) { this.color = color; }

    public void selectSegment(int[] indices) {
	Object temp = stats;

	for (int i = 0; indices != null && i < indices.length; i++)
	    temp = Array.get(temp, indices[i]);

	selected = temp;
    }

    public void draw() {
	double highestValue = 1;

	for (int i = 0; i < Array.getLength(selected); i++)
	    if (Array.getDouble(selected, i) > highestValue)
		highestValue = Array.getDouble(selected, i);

	for (int i = 0; i < graph.length; i++) {
	    graph[i].setColor(color);
	    graph[i].setWidth(lineWidth);
	    graph[i].setLine(x + width * i / graph.length, y + height * Array.getDouble(selected, i) / highestValue,
		    x + width * (i + 1) / graph.length, y + height * Array.getDouble(selected, i + 1) / highestValue);
	    GLRenderer.getInstance().addRenderElement(graph[i]);
	}
    }

    public void remove() {
	for (int i = 0; i < graph.length; i++) {
	    if (graph[i] != null)
		graph[i].remove();
	}
    }
}

/* GL */
