package pez;
import pez.Rutils;
import robocode.*;
import java.awt.geom.*;
import java.awt.*;
import java.awt.Color;
import java.util.*;
import java.util.zip.*;
import java.io.*;

// Marshmallow the Robot, by PEZ. It's good toasted too!
// $Id: Marshmallow.java,v 1.108 2003/04/13 00:24:24 peter Exp $

//Todo: Fix Melee - scanner, terrain and enemy selection
//      Don't shoot at Marshmallows when other enemies exists.
//      Team idea: Group bots around team leader in a rather tight circle.
//                 Move like a school of fish turning the strongest shield robot against
//                 the most agressive enemy. Dodge with team leaders. Take terrain off center
//                 but not totally cornered.

public class Marshmallow extends AdvancedRobot implements MarshmallowConstants {
    private Point2D location = new Point2D.Double();
    private Point2D nextLocation = new Point2D.Double();
    private Rectangle2D fieldRectangle;
    private Point2D center;
    private static int bulletsFired;
    private static int bulletsHit;
    private static int bulletsFiredAtMe;
    private static int bulletsHitMe;
    private static int bulletsFired_400_500;
    private static int bulletsHit_400_500;
    private static int skippedTurns;
    private static int totalTurns;
    private static int wins;
    private Enemy weakestEnemy = null;
    private Enemy strongestEnemy = null;
    private Enemy closestEnemy = null;
    private Enemy farthestEnemy = null;
    private Enemy currentEnemy = null;
    private static Enemies school = null;
    private boolean isAiming = false;
    private boolean hasFired = false;
    private boolean schoolHasFired = false;
    private long time;
    private boolean isMeleeBattle;
    private boolean isMelee;
    private boolean isOneOnOne;
    private boolean haveEnemy;
    private double rVelocity;
    private int oscillationDirection;
    private int radarDirection;
    private RadarTurnCompleteCondition radarTurnCompleteCondition;
    private boolean calculateDeltas;
    private double sectorAimWidth = (MC_SECTOR_AIM_MAX - MC_SECTOR_AIM_MIN) / MC_SECTOR_AIMS;
    private double distanceStepWidth = (MC_DISTANCE_MAX - MC_DISTANCE_MIN) / MC_DISTANCES;
    private String statisticsFilePostfix;
    private boolean forceFullRadarTurn;
    private Random random = new Random();

    public void run() {
        if (statisticsFilePostfix == null) {
            statisticsFilePostfix = getOthers() > 1 ? MC_STATISTICS_FILE_POSTFIX_MELEE : MC_STATISTICS_FILE_POSTFIX_1V1;
        }
        initRound();
        initTurn();
        execute();

        while (true) {
            initTurn();
            handleSchool();
            currentEnemy = chooseEnemy(school);
            if (currentEnemy != null) {
                hunt(currentEnemy);
            }
            if (getOthers() == 0) {
                goTo(new Point2D.Double(getBattleFieldWidth() / 2.0, 400.0));
            }
            execute();
            hasFired = false;
            schoolHasFired = false;
        }
    }

    private void initRound() {
        if (getOthers() >= 2) {
            isMelee = true;
            isMeleeBattle = true;
        }
        if (school == null) {
            school = new Enemies(this);
        }
        double margin = getWidth() / 2;
        fieldRectangle = new Rectangle2D.Double(0 + margin, 0 + margin,
            getBattleFieldWidth() - margin, getBattleFieldHeight() - margin);
        center = new Point2D.Double(fieldRectangle.getWidth() / 2.0, fieldRectangle.getHeight() / 2.0);
        setColors(
            new Color(255, (int)(20 + Math.random() * 80), (int)(60 + Math.random() * 180)),
            new Color((int)(Math.random() * 80), 100 + (int)(Math.random() * 150), 255),
            new Color((int)(20 + Math.random() * 80), 255, (int)(20 + Math.random() * 180))
            );
        setAdjustGunForRobotTurn(true);
        setAdjustRadarForGunTurn(true);
        radarTurnCompleteCondition = new RadarTurnCompleteCondition(this);
        addCustomEvent(radarTurnCompleteCondition);
        setTurnRadarRight(MC_FULL_TURN * 4);
        oscillationDirection = Math.random() < 0.5 ? -1 : 1;
        radarDirection = 1;
        updateLocation();
        isOneOnOne = false;
        calculateDeltas = false;
        rVelocity = MC_MAX_ROBOT_VELOCITY;
    }

    private void initTurn() {
        totalTurns++;
        time = getTime();
        if (getOthers() == 1) {
            isOneOnOne = true;
            removeCustomEvent(radarTurnCompleteCondition);
            if (!haveEnemy) {
                setTurnRadarLeft(22.5);
            }
            haveEnemy = false;
        }
        isMelee = getOthers() >= 2;
        updateLocation();
        setMaxVelocity(Math.abs(getTurnRemaining()) > 45 ? 0.1 : rVelocity);
    }

    private void updateLocation() {
        location.setLocation(getX(), getY());
    }

    private Enemy chooseEnemy(Enemies school) {
        school.categorize();
        Enemy closestEnemy = school.getClosest();
        Enemy weakestEnemy = school.getWeakest();
        Enemy easiestEnemy = school.getEasiest();
        if (closestEnemy != null) {
            return closestEnemy;
        }
        if (easiestEnemy != null) {
            return easiestEnemy;
        }
        if (weakestEnemy != null && weakestEnemy.isDisabled()) {
            return weakestEnemy;
        }
        if (weakestEnemy != null) {
            return weakestEnemy;
        }
        return null;
    }

    private void hunt(Enemy enemy) {
        int weight = 2;
        weight -= isMelee ? 1 : 0;
        if (enemy != null && enemy.isRecent()) {
            if (enemy.getEnergy() > 0.0) {
                if (getGunHeat()/getGunCoolingRate() < 2) {
                    if (!isAiming || time % 20 == 0) {
                        enemy.updateAimGuessing();
                        aimGunAt(enemy);
                        addCustomEvent(new ReadyToFireCondition(enemy));
                    }
                }
                else {
                    setTurnGunRight(Rutils.normalRelativeAngle(enemy.getAbsoluteBearing() - getGunHeading()));
                }
                dodge(enemy);
            }
            else if (getOthers() == 1) {
                goTo(enemy.getLocation());
            }
        }
    }

    private void handleSchool() {
        Iterator iterator = school.iterator();
        while (iterator.hasNext()) {
            Enemy enemy = (Enemy)iterator.next();
            if (enemy.isFiring()) {
                bulletsFiredAtMe++;
                this.schoolHasFired = true;
            }
        }
    }

    private void aimGunAt(Enemy enemy) {
        double guessedGunHeading;
        guessedGunHeading = enemy.getGuessedGunHeading();
        double gunTurn = Rutils.normalRelativeAngle(guessedGunHeading - getGunHeading());
        setTurnGunRight(gunTurn);
    }

    private void dodge(Enemy enemy) {
        if (Math.abs(getDistanceRemaining()) < Math.random() * 75) {
            if (Math.random() < 4 / rVelocity) {
                rVelocity = Math.min(MC_MAX_ROBOT_VELOCITY, 0.1 + Math.random() * 20);
            }
            if (enemy.getDistance() < 290) {
                rVelocity = MC_MAX_ROBOT_VELOCITY;
            }
            Point2D enemyLocation = enemy.getLocation();
            double forwardAngle = 85;
            double wantedDistanceExtra;
            if (getEnergy() / enemy.getEnergy() > 4.0) {
                wantedDistanceExtra = -0.35;
            }
            else {
                if (enemy.getDistance() < 475) {
                    wantedDistanceExtra = 0.3;
                }
                else {
                    wantedDistanceExtra = -0.1;
                }
            }
            if (isCornered()) {
                wantedDistanceExtra = -0.3;
                forwardAngle = 60.0;
            }
            Area escapeArea = Rutils.escapeArea(enemyLocation, location, forwardAngle, 85.0,
                fieldRectangle, enemy.getEFirePower(), rVelocity);
            double[] minMaxAngles = Rutils.escapeMinMaxAngles(enemyLocation, location, escapeArea);
            double relativeAngle = minMaxAngles[0] + (minMaxAngles[1] - minMaxAngles[0]) * Math.random();
            double wantedDistance = enemy.getDistance() + enemy.getDistance() * wantedDistanceExtra * Math.abs(relativeAngle) / 40.0;
            double angle = Rutils.pointsToAngle(enemyLocation, location) + relativeAngle;
            Point2D dLocation = new Point2D.Double();
            Rutils.toLocation(angle, wantedDistance, enemyLocation, dLocation);
            translateInsideField(dLocation, 35.0);
            goTo(dLocation);
        }
    }

    private boolean isCornered() {
        double m = 180;
        double mnX = m;
        double mnY = m;
        double mxX = fieldRectangle.getWidth() - m;
        double mxY = fieldRectangle.getHeight() - m;
        double x = location.getX();
        double y = location.getY();
        if ((x < mnX && (y < mnY || y > mxY)) || (x > mxX && (y < mnY || y > mxY))) {
            return true;
        }
        return false;
    }

    private void translateInsideField(Point2D point, double margin) {
        point.setLocation(Math.max(margin, Math.min(fieldRectangle.getWidth() - margin, point.getX())),
                          Math.max(margin, Math.min(fieldRectangle.getHeight() - margin, point.getY())));
    }

    private void goTo(Point2D point) {
        nextLocation.setLocation(point);
        double distance = location.distance(point);
        double angle = Rutils.normalRelativeAngle(Rutils.pointsToAngle(location, point) - getHeading());
        if (Math.abs(angle) > 90) {
            distance *= -1;
            if (angle > 0) {
                angle -= 180;
            }
            else {
                angle += 180;
            }
        }
        setTurnRight(angle);
        setAhead(distance);
    }

    private double enemyRelativeAngle(Enemy enemy, double angle) {
        return enemy.getAbsoluteBearing() + angle;
    }

    private Enemy getEnemyByName(String name) {
        Enemy searchFor = new Enemy(name);
        int index = school.indexOf(searchFor);
        if (index >= 0) {
            Enemy found = (Enemy)school.get(index);
            if (found != null) {
                return found;
            }
        }
        return null;
    }

    private String fileName(String name) {
        int index = name.indexOf(" ");
        if (index != -1) {
            return name.substring(0, index) + statisticsFilePostfix;
        }
        else {
            return name + statisticsFilePostfix;
        }
    }

    private void saveStatistics(Enemy enemy) {
        String enemyName;
        if (!isMeleeBattle) {
            if (enemy != null) {
                writeObject((Serializable)enemy.getTuningFactors(), fileName(enemy.getName()));
            }
            else {
                Iterator iterator = school.iterator();
                while (iterator.hasNext()) {
                    Enemy schoolEnemy = (Enemy)iterator.next();
                    if (schoolEnemy.isActive()) {
                        writeObject((Serializable)schoolEnemy.getTuningFactors(), fileName(schoolEnemy.getName()));
                    }
                }
            }
        }
    }

    private void printStats(Enemy enemy) {
        if (true) {
            if (enemy != null) {
                enemy.printStats();
            }
            else {
                Iterator iterator = school.iterator();
                while (iterator.hasNext()) {
                    Enemy schoolEnemy = (Enemy)iterator.next();
                    if (schoolEnemy.isActive()) {
                        schoolEnemy.printStats();
                    }
                    if (isMelee) {
                        break;
                    }
                }
            }
            out.println("< " + bulletsHitMe + " / " + bulletsFiredAtMe + " = " +
                Math.round(10000.0 * bulletsHitMe / bulletsFiredAtMe) / 100.0);
            out.println("> " + bulletsHit + " / " + bulletsFired + " = " +
                Math.round(10000.0 * bulletsHit / bulletsFired) / 100.0);
            out.println("> 400-500 " + bulletsHit_400_500 + " / " + bulletsFired_400_500 + " = " +
                Math.round(10000.0 * bulletsHit_400_500 / bulletsFired_400_500) / 100.0);
        }
        out.println("Wins: " + wins + ". Turns skipped/total=ratio: " + skippedTurns + "/" + totalTurns + "=" +
            Math.round(10000.0 * skippedTurns / totalTurns) / 100.0);
    }

    Point2D getLocation() {
        return this.location;
    }

    double absoluteBearing(double bearing) {
        return getHeading() + bearing;
    }

    boolean schoolHasFired() {
        return this.schoolHasFired;
    }

    boolean hasFired() {
        return this.hasFired;
    }

    boolean isMelee() {
        return this.isMelee;
    }

    Rectangle2D getFieldRectangle() {
        return fieldRectangle;
    }

    Point2D getNextLocation() {
        return this.nextLocation;
    }

    Point2D getCenter() {
        return this.center;
    }

    public void onHitRobot(HitRobotEvent e) {
        Enemy enemy = getEnemyByName(e.getName());
        if (enemy != null) {
            currentEnemy = enemy;
        }
    }

    public void onHitByBullet(HitByBulletEvent e) {
        Enemy enemy = getEnemyByName(e.getName());
        if (enemy != null) {
            enemy.getDodgeResetFactor().decrementResults();
            if (enemy.getDistance() > 250) {
                enemy.getOscillationFactor().incrementResults();
            }
            enemy.registerEHit();
        }
        bulletsHitMe++;
    }

    public void onScannedRobot(ScannedRobotEvent e) {
        double radarTurn;
        haveEnemy = true;
        if (!forceFullRadarTurn) {
            radarTurn = Rutils.normalRelativeAngle(getHeading() + e.getBearing() - getRadarHeading()) * 1.6;
            setTurnRadarRight(radarTurn);
        }
        Enemy storedEnemy = getEnemyByName(e.getName());
        if (storedEnemy != null) {
            storedEnemy.update(calculateDeltas, e.getEnergy(), e.getBearing(), e.getDistance(),
                e.getHeading(), e.getVelocity(), e.getTime());
            storedEnemy.activate();
            storedEnemy.setRobot(this);
        }
        else {
            Map factors = getEnemyTuningFactors(e.getName());
            school.add(new Enemy(this, e.getName(), factors,
                    e.getEnergy(), e.getBearing(), e.getDistance(), e.getHeading(), e.getVelocity(), e.getTime()));
        }
        calculateDeltas = true;
    }

    public void onBulletHit(BulletHitEvent e) {
        Enemy enemy = getEnemyByName(e.getName());
        if (enemy != null) {
            enemy.setDamage(enemy.getEnergy() - e.getEnergy());
            if (enemy.getDistance() >= 400 && enemy.getDistance() <= 500) {
                bulletsHit_400_500++;
            }
        }
        bulletsHit++;
    }

    public void onDeath(DeathEvent e) {
        printStats(null);
        saveStatistics(null);
        school.deactivate();
    }

    public void onRobotDeath(RobotDeathEvent e) {
        Enemy enemy = getEnemyByName(e.getName());
        if (enemy != null) {
            dodge(enemy);
            printStats(enemy);
            saveStatistics(enemy);
            if (getOthers() == 1) {
                statisticsFilePostfix = MC_STATISTICS_FILE_POSTFIX_1V1;
                enemy.setTuningFactors(getEnemyTuningFactors(enemy.getName()));
            }
            enemy.deactivate();
        }
    }

    public void onWin(WinEvent e) {
        wins++;
    }

    public void onSkippedTurn(SkippedTurnEvent e) {
        skippedTurns++;
    }

    public void onCustomEvent(CustomEvent e) {
        Condition condition = e.getCondition();
        if (condition instanceof ReadyToFireCondition) {
            Enemy enemy = ((ReadyToFireCondition)condition).enemy;
            Bullet bullet = fireBullet(enemy.rFirePower());		
            if (bullet != null) {
                addCustomEvent(new BulletHasHitOrMissedCondition(bullet, enemy));
                addCustomEvent(new VirtualGunsFinishedCondition(enemy));
                hasFired = true;
                bulletsFired++;
                if (enemy.getDistance() >= 400 && enemy.getDistance() <= 500) {
                    bulletsFired_400_500++;
                }
                if (isMelee) {
                    forceFullRadarTurn = true;
                    setTurnRadarRight(MC_FULL_TURN);
                }
            }
        }
        if (condition instanceof RadarTurnCompleteCondition) {
            if (forceFullRadarTurn) {
                forceFullRadarTurn = false;
            }
            else {
                setTurnRadarLeft(22.5);
            }
        }

    }

    private Map getEnemyTuningFactors(String enemyName) {
        Map factors;
        try {
            factors = (HashMap)readCompressedObject(fileName(enemyName));
        }
        catch (Exception e) {
            factors = new HashMap();
            factors.put("virtualGunFactorClose", new TuningFactor(0, MC_AIM_METHODS - 1, 1));
            factors.put("virtualGunFactorCloseLeft", new TuningFactor(0, MC_AIM_METHODS - 1, 1));
            factors.put("virtualGunFactorCloseRight", new TuningFactor(0, MC_AIM_METHODS - 1, 1));
            factors.put("virtualGunFactorNormal", new TuningFactor(0, MC_AIM_METHODS - 1, 1));
            factors.put("virtualGunFactorNormalLeft", new TuningFactor(0, MC_AIM_METHODS - 1, 1));
            factors.put("virtualGunFactorNormalRight", new TuningFactor(0, MC_AIM_METHODS - 1, 1));
            factors.put("virtualGunFactorFar", new TuningFactor(0, MC_AIM_METHODS - 1, 1));
            factors.put("virtualGunFactorFarLeft", new TuningFactor(0, MC_AIM_METHODS - 1, 1));
            factors.put("virtualGunFactorFarRight", new TuningFactor(0, MC_AIM_METHODS - 1, 1));
            factors.put("sectorAimFactorClose", new TuningFactor(MC_SECTOR_AIM_MIN, MC_SECTOR_AIM_MAX, sectorAimWidth));
            factors.put("sectorAimFactorCloseLeft", new TuningFactor(MC_SECTOR_AIM_MIN, MC_SECTOR_AIM_MAX, sectorAimWidth));
            factors.put("sectorAimFactorCloseRight", new TuningFactor(MC_SECTOR_AIM_MIN, MC_SECTOR_AIM_MAX, sectorAimWidth));
            factors.put("sectorAimFactorNormal", new TuningFactor(MC_SECTOR_AIM_MIN, MC_SECTOR_AIM_MAX, sectorAimWidth));
            factors.put("sectorAimFactorNormalLeft", new TuningFactor(MC_SECTOR_AIM_MIN, MC_SECTOR_AIM_MAX, sectorAimWidth));
            factors.put("sectorAimFactorNormalRight", new TuningFactor(MC_SECTOR_AIM_MIN, MC_SECTOR_AIM_MAX, sectorAimWidth));
            factors.put("sectorAimFactorFar", new TuningFactor(MC_SECTOR_AIM_MIN, MC_SECTOR_AIM_MAX, sectorAimWidth));
            factors.put("sectorAimFactorFarLeft", new TuningFactor(MC_SECTOR_AIM_MIN, MC_SECTOR_AIM_MAX, sectorAimWidth));
            factors.put("sectorAimFactorFarRight", new TuningFactor(MC_SECTOR_AIM_MIN, MC_SECTOR_AIM_MAX, sectorAimWidth));
            factors.put("escapeAreaFactorClose", new TuningFactor(0, MC_ESCAPE_AREA_SECTOR_MAX, 1));
            factors.put("escapeAreaFactorCloseLeft", new TuningFactor(0, MC_ESCAPE_AREA_SECTOR_MAX, 1));
            factors.put("escapeAreaFactorCloseRight", new TuningFactor(0, MC_ESCAPE_AREA_SECTOR_MAX, 1));
            factors.put("escapeAreaFactorNormal", new TuningFactor(0, MC_ESCAPE_AREA_SECTOR_MAX, 1));
            factors.put("escapeAreaFactorNormalLeft", new TuningFactor(0, MC_ESCAPE_AREA_SECTOR_MAX, 1));
            factors.put("escapeAreaFactorNormalRight", new TuningFactor(0, MC_ESCAPE_AREA_SECTOR_MAX, 1));
            factors.put("escapeAreaFactorFar", new TuningFactor(0, MC_ESCAPE_AREA_SECTOR_MAX, 1));
            factors.put("escapeAreaFactorFarLeft", new TuningFactor(0, MC_ESCAPE_AREA_SECTOR_MAX, 1));
            factors.put("escapeAreaFactorFarRight", new TuningFactor(0, MC_ESCAPE_AREA_SECTOR_MAX, 1));
            factors.put("dodgeResetFactor", new TuningFactor(0.0, 1.0, 0.333));
            factors.put("oscillationFactor", new TuningFactor(5, 255, 25));
            factors.put("distanceFactor", new TuningFactor(MC_DISTANCE_MIN, MC_DISTANCE_MAX, distanceStepWidth));
        }
        Iterator iterator = factors.values().iterator();
        while (iterator.hasNext()) {
            ((TuningFactor)iterator.next()).init();
        }
        connectVirtualGunFactors(factors);
        connectSectorAimFactors(factors);
        connectEscapeAreaFactors(factors);
        return factors;
    }
    
    private void connectVirtualGunFactors(Map factors) {
        ((TuningFactor)factors.get("virtualGunFactorClose")).connectNeighbour(
            (TuningFactor)factors.get("virtualGunFactorCloseLeft"));
        ((TuningFactor)factors.get("virtualGunFactorClose")).connectNeighbour(
            (TuningFactor)factors.get("virtualGunFactorCloseRight"));
        ((TuningFactor)factors.get("virtualGunFactorClose")).connectNeighbour(
            (TuningFactor)factors.get("virtualGunFactorNormal"));
        ((TuningFactor)factors.get("virtualGunFactorCloseLeft")).connectNeighbour(
            (TuningFactor)factors.get("virtualGunFactorNormalLeft"));
        ((TuningFactor)factors.get("virtualGunFactorCloseRight")).connectNeighbour(
            (TuningFactor)factors.get("virtualGunFactorNormalRight"));

        ((TuningFactor)factors.get("virtualGunFactorNormal")).connectNeighbour(
            (TuningFactor)factors.get("virtualGunFactorNormalLeft"));
        ((TuningFactor)factors.get("virtualGunFactorNormal")).connectNeighbour(
            (TuningFactor)factors.get("virtualGunFactorNormalRight"));
        ((TuningFactor)factors.get("virtualGunFactorNormal")).connectNeighbour(
            (TuningFactor)factors.get("virtualGunFactorFar"));
        ((TuningFactor)factors.get("virtualGunFactorNormalLeft")).connectNeighbour(
            (TuningFactor)factors.get("virtualGunFactorFarLeft"));
        ((TuningFactor)factors.get("virtualGunFactorNormalRight")).connectNeighbour(
            (TuningFactor)factors.get("virtualGunFactorFarRight"));

        ((TuningFactor)factors.get("virtualGunFactorFar")).connectNeighbour(
            (TuningFactor)factors.get("virtualGunFactorFarLeft"));
        ((TuningFactor)factors.get("virtualGunFactorFar")).connectNeighbour(
            (TuningFactor)factors.get("virtualGunFactorFarRight"));
    }

    private void connectSectorAimFactors(Map factors) {
        ((TuningFactor)factors.get("sectorAimFactorClose")).connectNeighbour(
            (TuningFactor)factors.get("sectorAimFactorCloseLeft"));
        ((TuningFactor)factors.get("sectorAimFactorClose")).connectNeighbour(
            (TuningFactor)factors.get("sectorAimFactorCloseRight"));
        ((TuningFactor)factors.get("sectorAimFactorClose")).connectNeighbour(
            (TuningFactor)factors.get("sectorAimFactorNormal"));
        ((TuningFactor)factors.get("sectorAimFactorCloseLeft")).connectNeighbour(
            (TuningFactor)factors.get("sectorAimFactorNormalLeft"));
        ((TuningFactor)factors.get("sectorAimFactorCloseRight")).connectNeighbour(
            (TuningFactor)factors.get("sectorAimFactorNormalRight"));

        ((TuningFactor)factors.get("sectorAimFactorNormal")).connectNeighbour(
            (TuningFactor)factors.get("sectorAimFactorNormalLeft"));
        ((TuningFactor)factors.get("sectorAimFactorNormal")).connectNeighbour(
            (TuningFactor)factors.get("sectorAimFactorNormalRight"));
        ((TuningFactor)factors.get("sectorAimFactorNormal")).connectNeighbour(
            (TuningFactor)factors.get("sectorAimFactorFar"));
        ((TuningFactor)factors.get("sectorAimFactorNormalLeft")).connectNeighbour(
            (TuningFactor)factors.get("sectorAimFactorFarLeft"));
        ((TuningFactor)factors.get("sectorAimFactorNormalRight")).connectNeighbour(
            (TuningFactor)factors.get("sectorAimFactorFarRight"));

        ((TuningFactor)factors.get("sectorAimFactorFar")).connectNeighbour(
            (TuningFactor)factors.get("sectorAimFactorFarLeft"));
        ((TuningFactor)factors.get("sectorAimFactorFar")).connectNeighbour(
            (TuningFactor)factors.get("sectorAimFactorFarRight"));
    }

    private void connectEscapeAreaFactors(Map factors) {
        ((TuningFactor)factors.get("escapeAreaFactorClose")).connectNeighbour(
            (TuningFactor)factors.get("escapeAreaFactorCloseLeft"));
        ((TuningFactor)factors.get("escapeAreaFactorClose")).connectNeighbour(
            (TuningFactor)factors.get("escapeAreaFactorCloseRight"));
        ((TuningFactor)factors.get("escapeAreaFactorClose")).connectNeighbour(
            (TuningFactor)factors.get("escapeAreaFactorNormal"));
        ((TuningFactor)factors.get("escapeAreaFactorCloseLeft")).connectNeighbour(
            (TuningFactor)factors.get("escapeAreaFactorNormalLeft"));
        ((TuningFactor)factors.get("escapeAreaFactorCloseRight")).connectNeighbour(
            (TuningFactor)factors.get("escapeAreaFactorNormalRight"));

        ((TuningFactor)factors.get("escapeAreaFactorNormal")).connectNeighbour(
            (TuningFactor)factors.get("escapeAreaFactorNormalLeft"));
        ((TuningFactor)factors.get("escapeAreaFactorNormal")).connectNeighbour(
            (TuningFactor)factors.get("escapeAreaFactorNormalRight"));
        ((TuningFactor)factors.get("escapeAreaFactorNormal")).connectNeighbour(
            (TuningFactor)factors.get("escapeAreaFactorFar"));
        ((TuningFactor)factors.get("escapeAreaFactorNormalLeft")).connectNeighbour(
            (TuningFactor)factors.get("escapeAreaFactorFarLeft"));
        ((TuningFactor)factors.get("escapeAreaFactorNormalRight")).connectNeighbour(
            (TuningFactor)factors.get("escapeAreaFactorFarRight"));

        ((TuningFactor)factors.get("escapeAreaFactorFar")).connectNeighbour(
            (TuningFactor)factors.get("escapeAreaFactorFarLeft"));
        ((TuningFactor)factors.get("escapeAreaFactorFar")).connectNeighbour(
            (TuningFactor)factors.get("escapeAreaFactorFarRight"));
    }

    public Object readCompressedObject(String filename) throws IOException {
        try {
            ZipInputStream zipin = new ZipInputStream(new
                FileInputStream(getDataFile(filename + ".zip")));
            zipin.getNextEntry();
            ObjectInputStream in = new ObjectInputStream(zipin);
            Object obj = in.readObject();
            in.close();
            return obj;
        }
        catch (ClassNotFoundException e) {
            System.out.println("Class not found! :-(");
            e.printStackTrace();
        }
        return null;
    }

    public void writeObject(Serializable obj, String filename) {
        try {
            ZipOutputStream zipout = new ZipOutputStream(new RobocodeFileOutputStream(getDataFile(filename + ".zip")));
            zipout.putNextEntry(new ZipEntry(filename));
            ObjectOutputStream out = new ObjectOutputStream(zipout);
            out.writeObject(obj);
            out.flush();
            zipout.closeEntry();
            out.close();
        }
        catch (IOException e) {
            System.out.println("Error writing Object:" + e);
        }
    } 

    class ReadyToFireCondition extends Condition {
        Enemy enemy;
        double guessedGunHeading;

        public ReadyToFireCondition(Enemy enemy) {
            this.enemy = enemy;
            this.guessedGunHeading = enemy.getGuessedGunHeading();
            isAiming = true;
        }

        public boolean test() {
            if (!this.enemy.isRecent()) {
                removeCustomEvent(this);
                return false;
            }
            if ((getGunHeat() == 0.0 && getGunTurnRemaining() == 0.0 && getEnergy() > 0.5) || time % 20 == 0) {
                isAiming = false;
                removeCustomEvent(this);
                return true;
            }
            return false;
        }
    }

    class BulletHasHitOrMissedCondition extends Condition {
        private Bullet bullet;
        private long impactTime;
        private String enemyName;
        Enemy enemy;
        double bestDistance;
        boolean success;

        public BulletHasHitOrMissedCondition(Bullet bullet, Enemy enemy) {
            this.bullet = bullet;
            this.enemy = enemy;
            enemyName = enemy.getName();
            enemy.registerRFired();
            impactTime = enemy.impactTime() - 1;
            bestDistance = enemy.getDistanceFactor().getValue();
        }

        public boolean test() {
            if (bullet.getVictim() != null || time > impactTime) {
                if (bullet.getVictim() != null && Math.random() < MC_DISTANCE_HIT_TUNING_WEIGHT) {
                    enemy.getDistanceFactor().incTuning(bestDistance);
                }
                success = bullet.getVictim() != enemyName;
                if (success) {
                    enemy.registerRHit();
                }
                else {
                    enemy.registerRMiss();
                }
                removeCustomEvent(this);
                return true;
            }
            if (!enemy.isActive()) {
                bulletsFired--;
                bulletsFired_400_500--;
                removeCustomEvent(this);
                return true;
            }
            return false;
        }
    }

    class VirtualGunsFinishedCondition extends Condition {
        private Enemy enemy;
        private Object[] vGuns;
        private TuningFactor vgVirtualGunFactor;
        private TuningFactor vgSectorAimFactor;
        private TuningFactor vgEscapeAreaFactor;

        public VirtualGunsFinishedCondition(Enemy enemy) {
            this.enemy = enemy;
            this.vGuns = enemy.getVirtualGuns();
            this.vgVirtualGunFactor = enemy.getVirtualGunFactor();
            this.vgSectorAimFactor = enemy.getSectorAimFactor();
            this.vgEscapeAreaFactor = enemy.getEscapeAreaFactor();
        }

        public boolean test() {
            if (!enemy.isActive() || !enemy.checkVGunStatus(vGuns, vgVirtualGunFactor, vgSectorAimFactor, vgEscapeAreaFactor)) {
                removeCustomEvent(this);
                return true;
            }
            return false;
        }
    }
}
